
===================================================
config-service
===================================================
yml 설정 파일 내용을 웹으로 확인해 보고 싶을 때에는 다음과 같이 호출하면 된다.
http://localhost:8888/{APPLICATION_NAME}/{profiles}
http://localhost:8888/eureka-service/master

git에 저장되어 있는 yml을 업데이트 한 후 http://localhost:8888/eureka-service/master 호출하면 다음과 같이 업데이트 된 내용이 로그로 출력된다.
Fetched for remote master and found 1 updates

망별 설정 파일 관리는 다음과 같이 한다.
front-service-op.yml (또는 properties)

config 파일 로컬 바라보게 설정
spring:
  cloud:
    config:
      server:
        native:
          searchLocations: classpath:/configs


bootstrap.properties 로 설정 파일을 관리하는 이유는 config server에 있는 properties를 참조하기 위함이다.
모든 MSA service 또는 eureka 서비스가 이와 같은 방식으로 운영되는 것 같다.

===================================================
eureka-service
===================================================

http://localhost:8761/ 페이지 접속하면 유레카 데쉬보드 나온다.

유레카를 통해 각 클라이언트에 전파되는 정보
http://localhost:8761/eureka/apps

1. 스프링 부트 구동
2. 자신의 정보를 유레카에서 보냄
3. 정보를 받은 유레카는 클라이언트에게 업데이트된 정보를 전달
4. 유레카 서버는 다른 클라이언트에게 정보를 전파

유레카는 서버와 클라이언트로 구성
유레카 서버가 죽어도 마지막으로 받은 정보를 이용하기 때문에 문제가 되지 않음



===================================================
config-client
===================================================
@RefreshScope
저 에노테이션이 달려있는 Class는 config repository에 yml을 변경해 주면 Build 없이 자동으로 변경이 됩니다. (완전 자동은 아님)
http://localhost:8094/refresh POST 방식으로 호출해야 한다. (body는 비어 있는 상태로)

Discovery 서버에 문제가 발생하여 동작하지 않는 경우에도 client 에서 서버 정보들을 저장하고 있기 때문에 현재 on 되어 있는 클러스터간의 통신에는 문제가 없다.



===================================================
hystrix
===================================================
hystrix 가 하는 역할
서비스를 감시하고 있다가 특정 서비스에 문제가 생겼다고 판단이 되면 연결을 끊고 default fallback 메세지를 준다.
http://localhost:9999/hystrix.stream 입력하여 모니터링 9999는 클라이언트 서버

Circuit Breakers
요청에 대한 500에러가 발생 시 이 에러를 client 에 던지는게 아니라 기본 fallback 메세지를 던진다.